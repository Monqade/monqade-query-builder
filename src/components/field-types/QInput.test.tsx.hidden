import React, { Component } from 'react';
import { render, act } from '@testing-library/react';
import { screen } from '@testing-library/dom';
import userEvent from '@testing-library/user-event';
import TestRenderer from 'react-test-renderer';

import { QInput } from './QInput';
import {
  CONDITION_OPERATORS,
  UIValidatorError,
  QSingleConditionChangeMessage,
} from './IFieldType';
import { domain } from 'process';
// import { act } from 'react-dom/test-utils';

const validatorIsValid = (...args: any[]): UIValidatorError => {
  return {
    hasError: false,
    errorText: '',
  };
};
const validatorNotValid = (...args: any[]): UIValidatorError => {
  return {
    hasError: true,
    errorText: 'This Has An Error',
  };
};

// export type UIInputError = {
//   hasError: boolean;
//   errorText: string;
// }

test('types inside textarea', () => {
  // document.body.innerHTML = `<textarea />`;
  act(() => {
    const component = render(
      <QInput
        nodeId="MyAwesomeNode"
        validator={validatorIsValid}
        onChange={(qCondition) => {}}
        fieldId="TheVield"
        conditionOperator={CONDITION_OPERATORS.eq}
        // initialValue="The Intial Value"
        // new
        id={'MyAwesomeNode:0-1-3'}
      />
    );
  });

  userEvent.type(screen.getByRole('textbox'), 'Hello, World!');
  expect(screen.getByRole('textbox')).toHaveAttribute('value', 'Hello, World!');
  // expect(screen.getByRole('textbox').textContent).toEqual('Hello, World!');
});

describe('QInput', () => {
  it('Should be a input (role=textbox)', () => {
    act(() => {
      render(
        <QInput
          nodeId="MyAwesomeNode"
          validator={validatorIsValid}
          onChange={(qCondition) => {}}
          fieldId="TheVield"
          conditionOperator={CONDITION_OPERATORS.eq}
          // new
          id={'MyAwesomeNode:0-1-3'}
        />
      );
    });
    const linkElement = screen.getByRole('textbox');
    expect(linkElement).toBeInTheDocument();
  });

  it('Should not call onChange when validator->false', () => {
    const parentHadleChange = jest.fn(
      (childChange: QSingleConditionChangeMessage) => {}
    );
    act(() => {
      render(
        <QInput
          nodeId="MyAwesomeNode"
          validator={validatorNotValid}
          onChange={parentHadleChange}
          fieldId="TheField"
          conditionOperator={CONDITION_OPERATORS.eq}
          // new
          id={'MyAwesomeNode:0-1-3'}
        />
      );
    });
    userEvent.type(screen.getByRole('textbox'), 'Hello, World!');
    expect(screen.getByRole('textbox')).toHaveValue('Hello, World!');
    expect(parentHadleChange).not.toHaveBeenCalled();
  });


  it('Should NOT call onChange invalid', () => {
    act(() => {
      render(
        <QInput
          nodeId="MyAwesomeNode"
          validator={validatorIsValid}
          onChange={(qCondition) => {}}
          fieldId="TheVield"
          conditionOperator={CONDITION_OPERATORS.eq}
          // new
          id={'MyAwesomeNode:0-1-3'}
        />
      );
    });
    const linkElement = screen.getByRole('textbox');
    expect(linkElement).toBeInTheDocument();
  });
  describe('Intial Text', () => {
    it('Should accept an intial value', () => {
      act(() => {
        render(
          <QInput
            nodeId="MyAwesomeNode"
            validator={validatorIsValid}
            onChange={(qCondition) => {}}
            fieldId="TheVield"
            conditionOperator={CONDITION_OPERATORS.eq}
            initialValue="The Intial Value"
            // new
            id={'MyAwesomeNode:0-1-3'}
          />
        );
      });
      userEvent.type(screen.getByRole('textbox'), ' Hello, World!');
      expect(screen.getByRole('textbox')).toHaveAttribute(
        'value',
        'The Intial Value Hello, World!'
      );
      // expect(screen.getByRole('textbox').textContent).toEqual('Hello, World!');
    });
  }); // describe initial value
  describe('Optional Text, helper, label, support ', () => {
    it('Should display all three', () => {
      act(() => {
        render(
          <QInput
            nodeId="MyAwesomeNode"
            validator={validatorIsValid}
            onChange={(qCondition) => {}}
            fieldId="TheVield"
            conditionOperator={CONDITION_OPERATORS.eq}
            initialValue="The Intial Value"
            helperText="The Helper Text"
            label="The Label Text"
            // new
            id={'MyAwesomeNode:0-1-3'}
          />
        );
      });
      const x = screen.getByRole('textbox');
      const l = screen.getByLabelText('The Label Text');
      // userEvent.type(screen.getByRole('textbox'), ' Hello, World!');
      expect(screen.getByRole('textbox')).toHaveAttribute(
        'value',
        'The Intial Value'
      );
      expect(screen.getByLabelText('The Label Text')).toHaveAttribute(
        'value',
        'The Intial Value'
      );
    });
  });

  describe('Optional Helper Text', () => {
    it('Should render helper in Paragraph Element', () => {
      const dom = render(
        <QInput
          nodeId="MyAwesomeNode"
          validator={validatorIsValid}
          onChange={(qCondition) => {}}
          fieldId="TheVield"
          conditionOperator={CONDITION_OPERATORS.eq}
          // new
          id={'MyAwesomeNode_0-1-3'}
          //options
          helperText="This is the Helper Text"
          label="This is the Label Text"
          initialValue="This is the initial value"
        />
      );
      expect(screen.getByRole('textbox')).toHaveValue(
        'This is the initial value'
      );
      const helperP = dom.container.querySelector(
        '#MyAwesomeNode_0-1-3-helper-text'
      );
      expect(helperP).not.toBeNull();
      expect(helperP?.constructor.name).toBe('HTMLParagraphElement');
      expect(helperP?.innerHTML).toBe('This is the Helper Text');
    });
    it('Should not render Paragraph helper text when not set', () => {
      const dom = render(
        <QInput
          nodeId="MyAwesomeNode"
          validator={validatorIsValid}
          onChange={(qCondition) => {}}
          fieldId="TheVield"
          conditionOperator={CONDITION_OPERATORS.eq}
          // new
          id={'MyAwesomeNode_0-1-3'}
          //options
          // helperText="This is the Helper Text"
          label="This is the Label Text"
          initialValue="This is the initial value"
        />
      );
      expect(screen.getByRole('textbox')).toHaveValue(
        'This is the initial value'
      );
      const helperP = dom.container.querySelector(
        '#MyAwesomeNode_0-1-3-helper-text'
      );
      expect(helperP).toBeNull();
    });
  }); // decribe optional text settings
  describe('onChange', () => {
    it('Should call onChange when appropriate', () => {
      const parentHadleChange = jest.fn(
        (childChange: QSingleConditionChangeMessage) => {}
      );
      act(() => {
        render(
          <QInput
            nodeId="MyAwesomeNode"
            validator={validatorIsValid}
            onChange={parentHadleChange}
            fieldId="TheField"
            conditionOperator={CONDITION_OPERATORS.eq}
            // new
            id={'MyAwesomeNode:0-1-3'}
          />
        );
      });

      const theExpected = {
        nodeId: 'MyAwesomeNode',
        condition: {
          ['TheField']: { [CONDITION_OPERATORS.eq]: 'Hello, World!' },
        },
      };

      userEvent.type(screen.getByRole('textbox'), 'Hello, World!');
      expect(screen.getByRole('textbox')).toHaveValue('Hello, World!');
      expect(parentHadleChange).toHaveBeenCalledWith(theExpected);
    });
    it('Should Optional', () => {
      const parentHadleChange = jest.fn(
        (childChange: QSingleConditionChangeMessage) => {}
      );
      act(() => {
        render(
          <QInput
            nodeId="MyAwesomeNode"
            validator={validatorIsValid}
            fieldId="TheField"
            conditionOperator={CONDITION_OPERATORS.eq}
            // new
            id={'MyAwesomeNode:0-1-3'}
          />
        );
      });
      userEvent.type(screen.getByRole('textbox'), 'Hello, World!');
      expect(screen.getByRole('textbox')).toHaveValue('Hello, World!');
    });
    it('Should only called when validator returns true', () => {
      const parentHadleChange = jest.fn(
        (childChange: QSingleConditionChangeMessage) => {}
      );
      act(() => {
        render(
          <QInput
            nodeId="MyAwesomeNode"
            validator={validatorNotValid}
            onChange={parentHadleChange}
            fieldId="TheField"
            conditionOperator={CONDITION_OPERATORS.eq}
            // new
            id={'MyAwesomeNode:0-1-3'}
          />
        );
      });

      const theExpected = {
        nodeId: 'MyAwesomeNode',
        condition: {
          ['TheField']: { [CONDITION_OPERATORS.eq]: 'Hello, World!' },
        },
      };

      userEvent.type(screen.getByRole('textbox'), 'Hello, World!');
      expect(screen.getByRole('textbox')).toHaveValue('Hello, World!');
      expect(parentHadleChange).not.toHaveBeenCalled();
    });
  }); // describe onChange
  describe('Validation Errors', () => {
    it('Should be optional', () => {
      const parentHadleChange = jest.fn(
        (childChange: QSingleConditionChangeMessage) => {}
      );
      act(() => {
        render(
          <QInput
            nodeId="MyAwesomeNode"
            onChange={parentHadleChange}
            fieldId="TheField"
            conditionOperator={CONDITION_OPERATORS.eq}
            // new
            id={'MyAwesomeNode:0-1-3'}
          />
        );
      });

      const theExpected = {
        nodeId: 'MyAwesomeNode',
        condition: {
          ['TheField']: { [CONDITION_OPERATORS.eq]: 'Hello, World!' },
        },
      };

      userEvent.type(screen.getByRole('textbox'), 'Hello, World!');
      expect(screen.getByRole('textbox')).toHaveValue('Hello, World!');
      expect(parentHadleChange).toHaveBeenCalledWith(theExpected);
    });
    it('Should indicate error to user', () => {
      const parentHadleChange = jest.fn(
        (childChange: QSingleConditionChangeMessage) => {}
      );
      // act(() => {
      const dom = render(
        <QInput
          nodeId="MyAwesomeNode"
          validator={validatorNotValid}
          onChange={parentHadleChange}
          fieldId="TheField"
          conditionOperator={CONDITION_OPERATORS.eq}
          // new
          id={'MyAwesomeNode:0-1-3'}
        />
      );
      // });
      // const helperP = dom.container.querySelector(
      //   '#MyAwesomeNode_0-1-3-helper-text'
      // );
      userEvent.type(screen.getByRole('textbox'), 'Hello, World!');

      const errorEls = dom.container.querySelectorAll('.Mui-error');
      expect(errorEls.length).toBe(3);

      const errorP = dom.container.querySelectorAll('p.Mui-error');
      expect(errorP.length).toBe(1);
      expect(errorP[0].innerHTML).toBe('This Has An Error');

      const errorLabel = dom.container.querySelectorAll('label.Mui-error');
      expect(errorLabel.length).toBe(1);
      expect(errorLabel[0].innerHTML).toBe('This Has An Error');

      const errorInput = dom.container.querySelectorAll(
        'div.Mui-error > input'
      );
      expect(errorInput.length).toBe(1);
      expect(screen.getByRole('textbox')).toHaveValue('Hello, World!');
      expect(parentHadleChange).not.toHaveBeenCalled();
    });
  });
});
